import java.io.Serializable;

class Link<T> implements Serializable
{
   public T dData;               
   public Link<T> next;                

   public Link(T d)             
   { 
	   dData = d; 
   }

   public void displayLink()         
   { 
	   System.out.print(dData.toString() + " "); 
   }
} 

class FirstLastList<T> implements Serializable
   {
   /**
	 * 
	 */
	private static final long serialVersionUID = 5387608269624864398L;
private Link<T> first;              
   private Link<T> last;                

   public FirstLastList()            
   {
      first = null;                 
      last = null;
   }

   public boolean isEmpty()          
   { 
	   return first==null; 
   }

   public void insertLast(T dd) 
   {
      Link<T> newLink = new Link<T>(dd);  
      if( isEmpty() )                
         first = newLink;           
      else
         last.next = newLink;        
      last = newLink;               
   }

   public T deleteFirst()         
   {                              
      T temp = first.dData;
      if(first.next == null)         
         last = null;                
      first = first.next;            
      return temp;
   }

   public void displayList()
   {
      Link<T> current = first;          
      while(current != null)         
      {
         current.displayLink();      
         current = current.next;     
      }
      System.out.println("");
   }
   
   public int size()
   {
	   int count = 0;
	   
	   Link<T> current = first;
	   while(current != null)
	   {
		   current = current.next;
		   count++;
	   }
	   
	   return count;
   }
}  

class Queue<T> implements Serializable
{
   /**
	 * 
	 */
	private static final long serialVersionUID = 7378708182197340521L;
private FirstLastList<T> theList;

   public Queue()                
   { 
	   theList = new FirstLastList<T>(); 
   }  

   public boolean isEmpty()          
   { 
	   return theList.isEmpty(); 
   }

   public void insert(T j)        
   { 
	   theList.insertLast(j); 
   }

   public T remove()              
   {  
	   return theList.deleteFirst();  
   }

   public void displayQueue()
   {
      System.out.print("Queue (front-->rear): ");
      theList.displayList();
   }
   
   public int size()
   {
	   return theList.size();
   }
}